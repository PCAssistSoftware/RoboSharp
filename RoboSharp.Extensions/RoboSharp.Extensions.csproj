<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
      <TargetFrameworks>
          net462;
          net48;
          netstandard2.0;
          netstandard2.1;
          netcoreapp3.1;
          net5.0;
          net6.0;
          net8.0;
      </TargetFrameworks>
      <NetFrameworkRegex><![CDATA[^net((4[5-8][0-2]?)|(.*2.0))$]]></NetFrameworkRegex>
      <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
      
      <Version>1.6.1</Version>
      <Copyright>Copyright 2024</Copyright>
      <Authors>Robert Brenckman</Authors>
      <owners>Terry | PC Assist Software | Robert Brenckman</owners>
      
      <PackageProjectUrl>https://github.com/PCAssistSoftware/RoboSharp</PackageProjectUrl>
      <PackageIcon>robosharp.png</PackageIcon>
      <PackageReadmeFile>readme.md</PackageReadmeFile>
      <license>license</license>
      <requireLicenseAcceptance>false</requireLicenseAcceptance>
      <GenerateDocumentationFile>true</GenerateDocumentationFile>
      <PackageTags>RoboSharp RoboCopy CopyFileEx</PackageTags>
      
      <Description>
          This is an Extension Package for RoboSharp, offering extension methods and classes that can be used to create custom IRoboCommand objects.
          - The AbstractIRoboCommand object should be used as the base for any custom IRoboCommands, as it provided the basic functionality. 
          - Included is a ResultsBuilder and a PairEvaluator object to easily evaluate the Source/Destination file/directory pairs. 
          
          RoboMover - This is a prebuilt IRoboCommand that is designed to move (not copy) files faster than RoboCopy, if the files are on the same root drive.
           - Robocopy will copy the file to the destination then delete from source, which is time consuming for large files being moved into a subfolder of the one they already reside in for example. 
           - RoboMover will instead use File.Move() to simply move the file into the new directory, instead of wasting time copying then deleting, greatly improving throughput.
           - RoboMover always checks if the Source and Destination are on the same root, and if files are getting moved. If both conditions are true, it performs the move. If either condition is false, it will run as a standard RoboCommand.
      </Description>
      <PackageReleaseNotes>
          - Fixed an issue with StreamedCopier that resulted in incorrect file sizes.
      </PackageReleaseNotes>
  </PropertyGroup>

    <ItemGroup>
        <ProjectReference Include="..\RoboSharp\RoboSharp.csproj" />
        <!-- Windows NativeMethods.txt - Source Generator -->
        <AdditionalFiles Include="Windows\NativeMethods.txt" />
        <PackageReference Include="Microsoft.Windows.CsWin32" Version="0.3.106">
            <PrivateAssets>all</PrivateAssets>
            <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
        </PackageReference>
        <!-- Nuget Stuff -->
        <None Include="..\readme.md" Pack="true" PackagePath="\" />
        <None Include="..\robosharp.png" Pack="true" PackagePath="\" />
        <None Include="..\license" Pack="true" PackagePath="\" />
    </ItemGroup>

    <!-- Conditional Target Requirements -->
    <Choose>
        <!-- NetFramework | NetStandard 2.0 -->
        <When Condition=" $([System.Text.RegularExpressions.Regex]::IsMatch('$(TargetFramework)', '$(NetFrameworkRegex)'))">
            <PropertyGroup>
                <langversion>9</langversion>
            </PropertyGroup>
            <ItemGroup>
                <PackageReference Include="System.Memory" Version="4.5.5" />
            </ItemGroup>
        </When>
        <!-- NetStandard 2.1 -->
        <When Condition=" '$(TargetFramework)' == 'netstandard2.1' Or '$(TargetFramework)' == 'netcoreapp3.1'">
            <PropertyGroup>
                <langversion>9</langversion>
            </PropertyGroup>
        </When>

        <!-- NetCoreApp | .Net5+ -->
        <Otherwise>

        </Otherwise>
    </Choose>
</Project>
